generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Hunt {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    scheduledAt DateTime?
    completedAt DateTime?
    name        String
    description String
    status      String    @default("pending")
    maxHunters  Int       @default(4)
    danger      Int       @default(1)
    hunters     Hunter[]
    photos      Photo[]
    rating      Float?
    comment     String?
    payment     Int

    @@index([status])
}

model Hunter {
    id       Int     @id @default(autoincrement())
    name     String
    hunts    Hunt[]
    photos   Photo[] @relation("Photos")
    avatar   Photo?  @relation("Avatar", fields: [avatarId], references: [id])
    avatarId Int?    @unique
    money    Int     @default(0)
    user     User    @relation(fields: [userId], references: [id])
    userId   String
}

model Photo {
    id       Int     @id @default(autoincrement())
    path     String  @unique
    width    Int
    height   Int
    blurry   String?
    hunter   Hunter? @relation("Photos", fields: [hunterId], references: [id])
    hunterId Int?
    hunt     Hunt?   @relation(fields: [huntId], references: [id])
    huntId   Int?
    avatar   Hunter? @relation("Avatar")

    @@index([huntId, hunterId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Hunter    Hunter[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken")
    access_token      String? @map("accessToken")
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken")
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}
